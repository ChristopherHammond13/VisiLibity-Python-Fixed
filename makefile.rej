--- visilibity.i	2009-04-15 23:30:36.000000000 -0400
+++ /dev/null
@@ -1,20 +0,0 @@
-%module visilibity
-%{
-
-#include "visilibity.hpp"
-%}
-%include std_vector.i
-namespace std {
-	  %template(pointList) vector<VisiLibity::Point>;
-	  %template(polygonList) vector<VisiLibity::Polygon>;
-}
-
-
-%include visilibity.hpp
-
-
-%extend VisiLibity::Polygon {
-  Point __getitem__(unsigned i) {
-    return (*self)[i];
-  }
-};--- visilibity_test.py	2009-04-15 23:32:55.000000000 -0400
+++ /dev/null
@@ -1,29 +0,0 @@
-import unittest
-
-
-class VisilibityTest(unittest.TestCase):
-    def testVisilibity(self):
-        import visilibity as vis
-
-        walls = vis.Polygon([vis.Point(0,0),
-                             vis.Point(960,0),
-                             vis.Point(960,960),
-                             vis.Point(0,960)])
-        hole = vis.Polygon([vis.Point(100, 100),
-                            vis.Point(150, 100),
-                            vis.Point(150, 200),
-                            vis.Point(100, 150)])
-        env = vis.Environment([walls, hole])
-        self.assertEqual(env.h(), 1)
-        start = vis.Point(1,1)
-        end = vis.Point(959,959)
-
-        isovist = vis.Visibility_Polygon(vis.Point(1,1), env)
-
-        for i in range(isovist.n()):
-            print isovist[i].x(), isovist[i].y()
-            
-        
-if __name__ == "__main__":
-    unittest.main()
-
